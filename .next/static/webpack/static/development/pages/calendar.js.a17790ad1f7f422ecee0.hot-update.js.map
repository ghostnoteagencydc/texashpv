{"version":3,"file":"static/webpack/static/development/pages/calendar.js.a17790ad1f7f422ecee0.hot-update.js","sources":["webpack:///./components/Calendar/CalendarView.js"],"sourcesContent":["import BigCalendar from 'react-big-calendar'\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport CalendarEvent from './CalendarEvent'\nimport moment from 'moment'\n\n// Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\nconst localizer = BigCalendar.momentLocalizer(moment) // or globalizeLocalizer\nconst now = new Date()\n\nimport React, { Component } from 'react'\n\nfunction getShortString(str) {\n  if (str.length > 20) {\n    return str.substring(0, 20) + '...'\n  } else {\n    return str\n  }\n}\n\nclass MyCalendar extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      events: []\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.props)\n    if (this.props.events) {\n      var parsed = this.props.events.map(e => {\n        console.log(moment(e.acf.end).toDate())\n        if (e.acf && e.acf.approved) {\n          var obj = {\n            id: e.id,\n            title: e.title,\n            allDay: e.acf.all_day,\n            start: moment(e.acf.start).toDate(),\n            end: moment(e.acf.end).toDate(),\n            approved: e.acf.approved,\n            description: e.acf.description ? e.acf.description : 'Event',\n            shortDescription: getShortString(\n              e.acf.description ? e.acf.description : 'Event'\n            )\n          }\n          console.log(obj)\n          return obj\n        }\n      })\n      this.setState({\n        events: parsed\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"calendar-wrap\">\n        <BigCalendar\n          localizer={localizer}\n          events={this.state.events}\n          startAccessor=\"start\"\n          endAccessor=\"end\"\n          components={{\n            event: () => {\n              var cev = new CalendarEvent()\n              cev.togglePopup = this.props.togglePopup\n              return cev\n            }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default MyCalendar\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;AAtDA;AACA;AAwDA;;;;A","sourceRoot":""}